# -*- coding: utf-8 -*-
"""kognitaImoveisoficial1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ExG4gml_ccq4vpF-EVXJ0TZRebkDGMo2

* Primeiro lugar irei ler e importar os data frame para saber com que eu estou trabalhando !!!
"""

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
from shapely.geometry import Point

pontos_interresse = pd.read_parquet('/content/pontos_interesse_geograficos.parquet')
unidades_faturamento = pd.read_parquet('/content/unidades_faturamento.parquet')

"""A baixo os dois primeiros data frame para saber o que estou trabalhando !!!

"""

pontos_interresse.head()

unidades_faturamento.head()

pontos_interresse['tipo_negocio'].unique()

negocios_valores= pontos_interresse.value_counts('tipo_negocio')
negocios_valores

"""baixei o sp municipios no site do gov brasil"""

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
from shapely.geometry import Point
import requests
import zipfile
import io

url = "https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2021/UFs/SP/SP_Municipios_2021.zip"
response = requests.get(url)

zip_file = zipfile.ZipFile(io.BytesIO(response.content))

zip_file.extractall("SP_Municipios")


shapefile_path = "SP_Municipios/SP_Municipios_2021.shp"
municipios = gpd.read_file(shapefile_path)

municipios = gpd.read_file('/content/SP_Municipios')

municipios.head()

"""Questao 1)"""

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
from shapely.geometry import Point

pontos_interesse = pd.read_parquet('/content/pontos_interesse_geograficos.parquet')

geometry = [Point(xy) for xy in zip(pontos_interesse.longitude, pontos_interesse.latitude)]
gdf_pontos_interesse = gpd.GeoDataFrame(pontos_interesse, geometry=geometry)
gdf_pontos_interesse = gdf_pontos_interesse.set_crs(municipios.crs)

gdf_pontos_municipios = gpd.sjoin(gdf_pontos_interesse, municipios, how="left", op='within')

pois_count = gdf_pontos_municipios.groupby('NM_MUN').size().reset_index(name='pois_count')

municipios_total = municipios.merge(pois_count, left_on='NM_MUN', right_on='NM_MUN', how='left')

municipios_total['pois_count'] = municipios_total['pois_count'].fillna(0)

"""Questao 2)"""

fig, ax = plt.subplots(1, 1, figsize=(15, 15))
municipios_total.plot(column='pois_count', cmap='Blues', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True)

ax.set_title('Quantidade Total de POIs por Município no Estado de São Paulo', fontdict={'fontsize': '15', 'fontweight' : '3'})
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')

plt.show()

"""Questao 3)"""

pois_category_count = gdf_pontos_municipios.groupby(['NM_MUN', 'tipo_negocio']).size().reset_index(name='pois_category_count')

top_categories = pois_category_count.groupby('tipo_negocio')['pois_category_count'].sum().nlargest(5).index

filtered_pois_category_count = pois_category_count[pois_category_count['tipo_negocio'].isin(top_categories)]
for category in top_categories:

    category_data = filtered_pois_category_count[filtered_pois_category_count['tipo_negocio'] == category]

    municipio_counts = category_data.groupby('NM_MUN')['pois_category_count'].sum().reset_index()

    municipios_category = municipios.merge(municipio_counts, left_on='NM_MUN', right_on='NM_MUN', how='left')

    municipios_category['pois_category_count'] = municipios_category['pois_category_count'].fillna(0)

    fig, ax = plt.subplots(1, 1, figsize=(15, 15))
    municipios_category.plot(column='pois_category_count', cmap='OrRd', linewidth=0.8, ax=ax, edgecolor='0.5', legend=True)

    ax.set_title(f'Quantidade de POIs da Categoria "{category}" por Município no Estado de São Paulo', fontdict={'fontsize': '12', 'fontweight' : '3'})
    ax.set_xlabel('Longitude')
    ax.set_ylabel('Latitude')

    plt.show()

"""questao 4)"""

concorrentes = ['restaurante', 'negocio', 'prestador', 'comercio', 'beleza']

concorrentes_data = gdf_pontos_municipios[gdf_pontos_municipios['tipo_negocio'].isin(concorrentes)]
concorrentes_count = concorrentes_data.groupby('NM_MUN').size().reset_index(name='po_concorrentes_count')
municipios_concorrentes = municipios.merge(concorrentes_count, left_on='NM_MUN', right_on='NM_MUN', how='left')

municipios_concorrentes['po_concorrentes_count'] = municipios_concorrentes['po_concorrentes_count'].fillna(0)

#Plotar o mapa
fig, ax = plt.subplots(1, 1, figsize=(15, 15))
municipios_concorrentes.plot(column='po_concorrentes_count', cmap='Greens', linewidth=0.8, ax=ax, edgecolor='0.5', legend=True)
ax.set_title('Quantidade Total de POIs das Categorias de Concorrentes por Município no Estado de São Paulo', fontdict={'fontsize': '15', 'fontweight' : '3'})
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')

plt.show()

pip install libpysal esda

""" Questao 5)"""

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
from shapely.geometry import Point
from libpysal.weights import Queen
from esda.moran import Moran

# --- Análise Total de POIs por Município ---
municipios_total = municipios.merge(pois_count, left_on='NM_MUN', right_on='NM_MUN', how='left')
municipios_total['pois_count'] = municipios_total['pois_count'].fillna(0)

w_total = Queen.from_dataframe(municipios_total)

values_total = municipios_total['pois_count'].values
moran_total = Moran(values_total, w_total)
print(f'Coeficiente I de Moran Global (Total de POIs): {moran_total.I}')
print(f'P-valor: {moran_total.p_sim}')

# --- Análise de Top 5 Categorias de POIs ---
top_category_count = top_category_data.groupby('NM_MUN').size().reset_index(name='top_category_count')

municipios_top = municipios.merge(top_category_count, left_on='NM_MUN', right_on='NM_MUN', how='left')
municipios_top['top_category_count'] = municipios_top['top_category_count'].fillna(0)

w_top = Queen.from_dataframe(municipios_top)

values_top = municipios_top['top_category_count'].values
moran_top = Moran(values_top, w_top)
print(f'Coeficiente I de Moran Global (Top 5 Categorias): {moran_top.I}')
print(f'P-valor: {moran_top.p_sim}')

# --- Análise de POIs para Categorias de Concorrentes ---

w_concorrentes = Queen.from_dataframe(municipios_concorrentes)

values_concorrentes = municipios_concorrentes['po_concorrentes_count'].values
moran_concorrentes = Moran(values_concorrentes, w_concorrentes)
print(f'Coeficiente I de Moran Global (Concorrentes): {moran_concorrentes.I}')
print(f'P-valor: {moran_concorrentes.p_sim}')

pip install folium

"""Questao 6)"""

import folium
from folium import IFrame

unidades_faturamento = pd.read_parquet('/content/unidades_faturamento.parquet')

faturamento_colunas = unidades_faturamento.columns[1:-2]
unidades_faturamento[faturamento_colunas] = unidades_faturamento[faturamento_colunas].apply(pd.to_numeric, errors='coerce')
unidades_faturamento['mediana_faturamento'] = unidades_faturamento[faturamento_colunas].median(axis=1)

m = folium.Map(location=[-23.5505, -46.6333], zoom_start=12)

for _, row in unidades_faturamento.iterrows():
    lat = row['latitude']
    lon = row['longitude']
    faturamento = row['mediana_faturamento']
    id_unidade = row['id_unidade']

    popup_text = f"""
    <b>ID da Unidade:</b> {id_unidade}<br>
    <b>Latitude:</b> {lat}<br>
    <b>Longitude:</b> {lon}<br>
    <b>Mediana do Faturamento:</b> R${faturamento:,.2f}
    """

    iframe = IFrame(popup_text, width=200, height=150)
    popup = folium.Popup(iframe, max_width=200)

    folium.Marker(
        location=[lat, lon],
        popup=popup,
        icon=folium.Icon(color='blue', icon='info-sign')
    ).add_to(m)

m.save('/content/Mapa_Faturamento.html')

"""Questao 7) copiei a questao 6 so adicionei a Regressao Linear e as tendencias"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import folium
from folium import IFrame

unidades_faturamento = pd.read_parquet('/content/unidades_faturamento.parquet')

faturamento_colunas = unidades_faturamento.columns[1:-2]
unidades_faturamento[faturamento_colunas] = unidades_faturamento[faturamento_colunas].apply(pd.to_numeric, errors='coerce')
unidades_faturamento['mediana_faturamento'] = unidades_faturamento[faturamento_colunas].median(axis=1)

unidades_faturamento['tendencia'] = np.nan

for idx, row in unidades_faturamento.iterrows():

    y = row[faturamento_colunas].values.reshape(-1, 1)

    X = np.arange(len(faturamento_colunas)).reshape(-1, 1)


    reg = LinearRegression().fit(X, y)

    slope = reg.coef_[0][0]
    if slope > 0:
        tendencia = 'alta'
    else:
        tendencia = 'baixa'

    unidades_faturamento.at[idx, 'tendencia'] = tendencia

m = folium.Map(location=[-23.5505, -46.6333], zoom_start=12)

for _, row in unidades_faturamento.iterrows():
    lat = row['latitude']
    lon = row['longitude']
    faturamento = row['mediana_faturamento']
    id_unidade = row['id_unidade']
    tendencia = row['tendencia']

    color = 'green' if tendencia == 'alta' else 'red'

    popup_text = f"""
    <b>ID da Unidade:</b> {id_unidade}<br>
    <b>Latitude:</b> {lat}<br>
    <b>Longitude:</b> {lon}<br>
    <b>Mediana do Faturamento:</b> R${faturamento:,.2f}<br>
    <b>Tendência:</b> {tendencia.capitalize()}
    """

    iframe = IFrame(popup_text, width=200, height=150)
    popup = folium.Popup(iframe, max_width=200)

    folium.Marker(
        location=[lat, lon],
        popup=popup,
        icon=folium.Icon(color=color, icon='info-sign')
    ).add_to(m)

m.save('/content/Mapa_Faturamento_Tendencia.html')

"""8)"""

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
from shapely.geometry import Point

unidades_faturamento = pd.read_parquet('/content/unidades_faturamento.parquet')
municipios = gpd.read_file('/content/SP_Municipios')

faturamento_colunas = unidades_faturamento.columns[1:-2]
unidades_faturamento[faturamento_colunas] = unidades_faturamento[faturamento_colunas].apply(pd.to_numeric, errors='coerce')
unidades_faturamento['mediana_faturamento'] = unidades_faturamento[faturamento_colunas].median(axis=1)

geometry = [Point(xy) for xy in zip(unidades_faturamento.longitude, unidades_faturamento.latitude)]
gdf_unidades_faturamento = gpd.GeoDataFrame(unidades_faturamento, geometry=geometry)
gdf_unidades_faturamento = gdf_unidades_faturamento.set_crs(municipios.crs)

gdf_faturamento_municipios = gpd.sjoin(gdf_unidades_faturamento, municipios, how="left", op='within')

faturamento_medio_municipio = gdf_faturamento_municipios.groupby('NM_MUN')['mediana_faturamento'].mean().reset_index()
faturamento_medio_municipio.rename(columns={'mediana_faturamento': 'faturamento_medio'}, inplace=True)

municipios = municipios.merge(faturamento_medio_municipio, left_on='NM_MUN', right_on='NM_MUN', how='left')

print(municipios.head())
print(municipios.columns)

municipios['faturamento_medio'] = municipios['faturamento_medio'].fillna(0)

#Plotar o mapa
fig, ax = plt.subplots(1, 1, figsize=(15, 15))
municipios.plot(column='faturamento_medio', cmap='YlGnBu', linewidth=0.8, ax=ax, edgecolor='0.8', legend=True)
ax.set_title('Faturamento Médio por Município no Estado de São Paulo', fontdict={'fontsize': '15', 'fontweight': '3'})
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')

plt.show()

"""9)Baixei dados populacional de 2021 do site do IBGE, abri e filtrei so os municipios de sao paulo !!! Obs( Por mais simples que parecia esse exercicio eu fiquei cerca de 7 horas nele kkkkkk )"""

import pandas as pd
dados_populacao_sp = pd.read_csv('/content/pessoas.csvUTF8.csv', sep=';')
dados_populacao_sp.head()

import pandas as pd

municipios.to_csv('municipios.csv', index=False)

import pandas as pd

pessoas = pd.read_csv('/content/pessoas.csvUTF8.csv', sep=';')
municipios = pd.read_csv('municipios.csv')


municipios.head()

pessoas.head()

municipios = pd.read_csv('/content/municipios.csv')
pessoas = pd.read_csv('/content/pessoas.csvUTF8.csv', delimiter=';')

print(municipios.columns)
print(pessoas.columns)

df_merged['populacao'] = pd.to_numeric(df_merged['populacao'], errors='coerce')


df_merged['faturamento_por_100k_hab'] = (df_merged['faturamento_medio'] / df_merged['populacao']) * 100000

df_merged['faturamento_por_100k_hab'] = (df_merged['faturamento_medio'] / df_merged['populacao']) * 100000

print(df_merged[['NM_MUN', 'SIGLA', 'faturamento_por_100k_hab']])

print(df_merged[['NM_MUN', 'SIGLA', 'faturamento_medio', 'populacao', 'faturamento_por_100k_hab']].head())

df_merged.tail()



"""10)"""



"""11)"""

